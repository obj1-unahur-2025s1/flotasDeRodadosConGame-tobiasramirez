import example.*

describe "test etapa 1" {
  const cachito = new Corsa(color=rojo)
  const corsaAzul1 = new Corsa(color=azul)
  const corsaVerde1 = new Corsa(color=verde)
  const kwidConTanque1 = new Kwid(adicional = tanque)
  const autoEspecial1 = new AutoEspecial(capacidad = 5, velocidadMax=160, peso = 1200, color = beige)
  const deportes = new Dependencia(rodados=[cachito, corsaAzul1, corsaVerde1, kwidConTanque1,autoEspecial1], empleados=45)
  const kwidConTanque2 = new Kwid(adicional = tanque)
  const kwidConTanque3 = new Kwid(adicional = tanque)
  const kwidSinTanque1 = new Kwid(adicional = sinAdicional)
  const cultura = new Dependencia(rodados=[cachito,kwidConTanque2, kwidConTanque3, kwidSinTanque1,trafic], empleados=31)

  test "deportes pesa 6450kg " {
    assert.equals(6450, deportes.pesoTotal())
  }
  test "cultura pesa 10.700kg" {
    assert.equals(10700, cultura.pesoTotal())
  }
  test "deportes esta bien equipada" {
    assert.that(deportes.estaBienEquipada())
  }
  test "cultura no esta bien equipada" {
    assert.notThat(cultura.estaBienEquipada())
  }
  test "la capacidad total en color azul de la dependencia deportes es de 7 personas" {
    assert.equals(7, deportes.capacidadTotalEnColor(azul))
  }
  test "la capacidad total en color azul de la dependencia cultura es de 10 personas" {
    assert.equals(10, cultura.capacidadTotalEnColor(azul))
  }
  test "el color del rodado mas rapido de deportes es beige" {
    assert.equals(deportes.colorDelRodadoMasRapido() ,beige)
  }
  test "el color del rodado mas rapido de cultura es rojo" {
    assert.equals(cultura.colorDelRodadoMasRapido() ,rojo)
  }
  test "deportes es grande" {
    assert.that(deportes.esGrande())
  }
  test "cultura no es grande" {
    assert.notThat(cultura.esGrande())
  }
  test "la capacidad faltante de deportes es 25" {
    assert.equals(25, deportes.capacidadFaltante())
  }
  test "la capacidad faltante de cultura es 5" {
    assert.equals(5, cultura.capacidadFaltante())
  }
}
describe "test etapa 2" {
  const cachito = new Corsa(color=rojo)
  var pedido1 = new Pedido(distancia=960, tiempoMaximo=8, pasajeros=4, coloresIncompatibles=#{azul,negro})
  test "cachito puede satisfacer el pedido1" {
    assert.that(pedido1.puedeSatisfacerUnPedido(cachito))
  }
  test "cachito ya no puede satisfacer el pedido si agregamos el rojo a los colores incompatibles" {
    pedido1.coloresIncompatibles().add(rojo)
    assert.notThat(pedido1.puedeSatisfacerUnPedido(cachito))
  }
  test "cachito ya no puede satisfacer el pedido si cambiamos la cantidad de pasajeros a 6" {
    pedido1.pasajeros(6)
    assert.notThat(pedido1.puedeSatisfacerUnPedido(cachito))
  }
  test "cachito ya no puede satisfacer el pedido si cambiamos el tiempo maximo a 6 horas" {
    pedido1.tiempoMaximo(6)
    assert.notThat(pedido1.puedeSatisfacerUnPedido(cachito))
  }
}
describe "test etapa 3" {
  const cachito = new Corsa(color=rojo)
  const corsaAzul1 = new Corsa(color=azul)
  const corsaVerde1 = new Corsa(color=verde)
  const kwidConTanque1 = new Kwid(adicional = tanque)
  const autoEspecial1 = new AutoEspecial(capacidad = 5, velocidadMax=160, peso = 1200, color = beige)
  const pedido1 = new Pedido(distancia=960, tiempoMaximo=8, pasajeros=4, coloresIncompatibles=[azul,negro])
  const pedido2 = new Pedido(distancia=960, tiempoMaximo=8, pasajeros=4, coloresIncompatibles=[beige,negro,azul,rojo])
  const deportes = new Dependencia(rodados=[cachito, corsaAzul1, corsaVerde1, kwidConTanque1,autoEspecial1], empleados=45, pedidos = [pedido1, pedido2])
  test "description" {
    
  }
}